const puppeteer = require("puppeteer");
const axios = require("axios");
const cheerio = require("cheerio");
const urlModule = require("url");
const unwantedDomains = require("./unwanted-domains");
const XLSX = require("xlsx");
const fs = require("fs");
const path = require("path");

function exportToExcel(data, filename = "thong-tin.xlsx") {
  // T·∫°o folder n·∫øu ch∆∞a c√≥
  const outputFolder = path.join(__dirname, "output");
  if (!fs.existsSync(outputFolder)) {
    fs.mkdirSync(outputFolder);
  }
  // T√™n file v√† ƒë∆∞·ªùng d·∫´n l∆∞u
  const filepath = path.join(outputFolder, filename);

  const worksheet = XLSX.utils.json_to_sheet(data);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "Data");
  XLSX.writeFile(workbook, filepath);
}

// T·∫°m d·ª´ng gi·ªØa c√°c l·∫ßn request ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† domain ch√≠nh th·ª©c kh√¥ng
function isOfficialDomain(url) {
  const trustedDomains = [
    ".edu.vn",
    ".vn",
    ".com",
    ".net",
    ".org",
    ".co",
    ".biz",
    ".gov.vn",
    ".com.vn",
    ".info",
    ".io",
  ];

  if (unwantedDomains.some((domain) => url.includes(domain))) return false;
  return trustedDomains.some((domain) => url.includes(domain));
}

// Tr√≠ch xu·∫•t email, s·ªë ƒëi·ªán tho·∫°i, t√™n, ƒë·ªãa ch·ªâ t·ª´ HTML
function extractData(html, url) {
  const $ = cheerio.load(html);
  const name = $("title").text().trim();

  // B∆∞·ªõc 1: L·∫•y c√°c s·ªë ƒëi·ªán tho·∫°i t·ª´ <a href="tel:...">
  let phoneCandidates = [];
  $("a[href^='tel:']").each((i, el) => {
    const textPhone = $(el).text().trim();
    if (textPhone) phoneCandidates.push(textPhone);
    const hrefPhone = $(el).attr("href").replace(/^tel:/i, "").trim();
    if (hrefPhone) phoneCandidates.push(hrefPhone);
  });

  // B∆∞·ªõc 2: L·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ c√°c v√πng text c√≥ kh·∫£ nƒÉng
  if (phoneCandidates.length === 0) {
    let contactSection = $("footer").text().trim();

    if (!contactSection || contactSection.length < 10) {
      contactSection = $("header").text().trim();
    }

    if (!contactSection || contactSection.length < 10) {
      const possibleSections = $("body")
        .find("*")
        .filter((i, el) => {
          const id = $(el).attr("id") || "";
          const className = $(el).attr("class") || "";
          const txt = $(el).text().toLowerCase();
          return (
            id.toLowerCase().includes("contact") ||
            id.toLowerCase().includes("footer") ||
            id.toLowerCase().includes("info") ||
            className.toLowerCase().includes("contact") ||
            className.toLowerCase().includes("footer") ||
            className.toLowerCase().includes("info") ||
            txt.includes("li√™n h·ªá") ||
            txt.includes("contact") ||
            txt.includes("phone") ||
            txt.includes("ƒëi·ªán tho·∫°i")
          );
        });

      if (possibleSections.length > 0) {
        contactSection = $(possibleSections[0]).text().trim();
      }
    }

    if (!contactSection || contactSection.length < 10) {
      contactSection = $("body").text().trim();
    }

    // D√πng regex b·∫Øt s·ªë ƒëi·ªán tho·∫°i d·∫°ng c√≥ d·∫•u ch·∫•m, d·∫•u c√°ch, d·∫•u g·∫°ch ngang,...
    const phoneRegex = /(\+?84|0)([\s.\-()]*\d){8,12}/g;
    const phoneMatches = Array.from(
      contactSection.matchAll(phoneRegex),
      (m) => m[0]
    );

    phoneCandidates = phoneMatches;
  }

  // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i
  const rawPhones = phoneCandidates.map(formatPhoneVN);
  const validPhones = [...new Set(rawPhones.filter((p) => p))];
  const phones = validPhones.slice(0, 2).map(formatReadablePhoneVN).join("; ");

  // T√¨m email
  const contactText = $("footer").text() || $("body").text();
  const emailMatch = contactText.match(
    /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/
  );

  // T√¨m ƒë·ªãa ch·ªâ
  const addressMatch = contactText.match(
    /(ƒê·ªãa ch·ªâ|Tr·ª• s·ªü|VƒÉn ph√≤ng|Address)[\s:\-‚Äì]{1,3}([^\n\r]{10,150})/i
  );

  const hostname = require("url").parse(url).hostname.replace("www.", "");

  return {
    website: hostname,
    name,
    phones: phones.length ? phones : "Kh√¥ng t√¨m th·∫•y",
    // email: emailMatch ? emailMatch[0].trim() : "Kh√¥ng t√¨m th·∫•y",
    address: addressMatch ? addressMatch[2].trim() : "Kh√¥ng t√¨m th·∫•y",
  };
}

// H√†m chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i (lo·∫°i b·ªè d·∫•u ch·∫•m, kho·∫£ng tr·∫Øng, chuy·ªÉn +84 v·ªÅ 0...)
function formatPhoneVN(phone) {
  if (!phone) return "";
  phone = phone.replace(/[\s.\-\(\)]/g, "");
  if (/^00(?!84)/.test(phone)) return "";
  if (/^\+(\d{1,3})/.test(phone) && !phone.startsWith("+84")) return "";
  if (phone.startsWith("+84")) phone = "0" + phone.slice(3);
  else if (phone.startsWith("84")) phone = "0" + phone.slice(2);
  if (/^0\d{9,10}$/.test(phone)) return phone;
  return "";
}

// H√†m format s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ d·ªÖ ƒë·ªçc
function formatReadablePhoneVN(phone) {
  if (!phone) return "";
  if (phone.length === 10)
    return phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1 $2 $3");
  if (phone.length === 11)
    return phone.replace(/(\d{4})(\d{3})(\d{4})/, "$1 $2 $3");
  return phone;
}

module.exports = { extractData };

// ‚ú® H√†m m·ªõi: T√¨m trang li√™n h·ªá trong website
async function findContactPage(homeUrl) {
  const possiblePaths = ["/lien-he", "/lienhe", "/contact", "/contact-us"];
  for (const path of possiblePaths) {
    const fullUrl = new URL(path, homeUrl).href;
    try {
      const res = await axios.get(fullUrl, {
        headers: {
          "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
        },
        timeout: 10000,
      });

      const html = res.data;
      const contactSection = cheerio.load(html)("body").text().toLowerCase();
      if (
        contactSection.includes("li√™n h·ªá") ||
        contactSection.includes("contact")
      ) {
        console.log(`üëâ T√¨m th·∫•y trang li√™n h·ªá: ${fullUrl}`);
        return extractData(html, fullUrl);
      }
    } catch (err) {
      // kh√¥ng c√≥ g√¨, ti·∫øp t·ª•c th·ª≠ URL kh√°c
    }
  }
  return null;
}

// üîç Truy c·∫≠p website v√† ch·ªâ l·∫•y t·ª´ trang ch·ªß ho·∫∑c trang li√™n h·ªá
async function scrapeWebsite(url) {
  try {
    const res = await axios.get(url, {
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
      },
    });

    // Th·ª≠ t√¨m trang li√™n h·ªá
    const contactData = await findContactPage(url);
    if (contactData) return contactData;

    // N·∫øu kh√¥ng c√≥ th√¨ d√πng trang ch·ªß
    return extractData(res.data, url);
  } catch (err) {
    console.error(`‚ùå L·ªói truy c·∫≠p ${url}`);
    return null;
  }
}

// T√¨m ki·∫øm tr√™n Google v√† ch·ªâ l·∫•y m·ªôt URL duy nh·∫•t cho m·ªói domain
async function searchWithPuppeteer(keyword) {
  const browser = await puppeteer.launch({
    headless: "new",
    slowMo: 50,
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-blink-features=AutomationControlled",
    ],
  });

  const page = await browser.newPage();
  await page.setUserAgent(
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
  );

  const allLinks = [];

  const maxPages = 10; // üîÅ s·ªë trang Google search b·∫°n mu·ªën duy·ªát (m·ªói trang ~10 link)
  for (let i = 0; i < maxPages; i++) {
    const start = i * 10;
    const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(
      keyword
    )}&start=${start}`;

    try {
      await page.goto(searchUrl, {
        waitUntil: "domcontentloaded",
        timeout: 60000,
      });

      await page.waitForSelector("a[href^='http']", { timeout: 10000 });

      const links = await page.$$eval("a[href^='http']", (anchors) =>
        anchors.map((a) => a.href)
      );

      allLinks.push(...links);
    } catch (err) {
      console.warn(
        `‚ö†Ô∏è L·ªói khi t·∫£i trang k·∫øt qu·∫£ Google #${i + 1}:`,
        err.message
      );
    }

    await sleep(Math.random() * 2000 + 1000); // delay tr√°nh b·ªã ch·∫∑n
  }

  await browser.close();

  // üëâ L·ªçc c√°c link h·ª£p l·ªá
  const officialLinks = allLinks.filter(isOfficialDomain);

  // üëâ Lo·∫°i tr√πng domain
  const uniqueDomainMap = new Map();
  for (const link of officialLinks) {
    const hostname = urlModule.parse(link).hostname.replace("www.", "");
    if (!uniqueDomainMap.has(hostname)) {
      uniqueDomainMap.set(hostname, link);
    }
  }

  return Array.from(uniqueDomainMap.values());
}
// Set name for excel file
function getTimestampedFilename(prefix = "thong-tin") {
  const now = new Date();
  const formatted = now.toISOString().replace(/[:.]/g, "-");
  return `${prefix}-${formatted}.xlsx`;
}

// Chuy·ªÉn sang slug
function createSlug(str) {
  const change = str
    .normalize("NFD") // t√°ch d·∫•u
    .replace(/[\u0300-\u036f]/g, "") // x√≥a d·∫•u
    .replace(/ƒë/g, "d") // chuy·ªÉn ƒë -> d
    .replace(/ƒê/g, "D");
  const slug = change.replace(/\s+/g, "-").toLowerCase();
  return slug;
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
(async () => {
  const keyword = "tr∆∞·ªùng m·∫ßm non";
  const urls = await searchWithPuppeteer(keyword);
  console.log(`üì¶ T·ªïng s·ªë website ch√≠nh th·ª©c: ${urls.length}`);
  console.log("üîé K·∫øt qu·∫£ t√¨m ki·∫øm (ch√≠nh th·ª©c, kh√¥ng tr√πng):", urls);
  const output = [];
  let stt = 0;
  for (const url of urls) {
    const info = await scrapeWebsite(url);
    if (info && typeof info === "object" && Object.keys(info).length > 0) {
      stt++;
      // const infoWithSTT = { STT: stt, ...info };
      const infoWithSTT = {
        STT: stt,
        WEBSITE: info.website,
        PHONE: info.phones,
        NAME: info.name,
        ADDRESS: info.address,
      };
      output.push(infoWithSTT);

      console.log("‚úÖ Th√¥ng tin thu th·∫≠p ƒë∆∞·ª£c:", infoWithSTT);
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin h·ª£p l·ªá t·ª´:", url);
    }
    await sleep(Math.random() * 3000 + 1000); // delay tr√°nh b·ªã ch·∫∑n
  }
  // Xu·∫•t file excel
  if (output.length === 0) {
    console.warn("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ ghi v√†o Excel.");
  } else {
    const filename = getTimestampedFilename(createSlug(keyword));
    exportToExcel(output, filename);
    console.log("üì§ ƒê√£ ghi file Excel:", filename);
  }
})();
