const puppeteer = require("puppeteer");
const fs = require("fs");
const path = require("path");
const fetch = require("node-fetch");
const xml2js = require("xml2js");
const { MongoClient } = require("mongodb");
const robotsParser = require("robots-parser");
const { URL } = require("url");

// --- C·∫•u h√¨nh chung ---
const startUrl = "https://mayphatdientanthanhtai.com/"; // üîÅ Thay b·∫±ng website c·∫ßn crawl
const outputDir = "output"; // Th∆∞ m·ª•c l∆∞u tr·ªØ k·∫øt qu·∫£ crawl
const maxArticlesToCrawlForSitemap = 500; // S·ªë l∆∞·ª£ng b√†i vi·∫øt t·ªëi ƒëa c·∫ßn crawl ƒë·ªÉ T·∫†O SITEMAP M·ªöI
const maxArticlesToAnalyze = 1000; // S·ªë l∆∞·ª£ng b√†i vi·∫øt t·ªëi ƒëa c·∫ßn PH√ÇN T√çCH SEO t·ª´ sitemap M·ªöI
const mongoUri = "mongodb://localhost:27017"; // URI k·∫øt n·ªëi MongoDB
const dbName = "seo_crawler"; // T√™n database MongoDB

// --- Bi·∫øn theo d√µi tr·∫°ng th√°i v√† th·ªëng k√™ (s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t l·∫°i cho c√°c giai ƒëo·∫°n) ---
let visited = new Set();
let toVisit = new Set();
const crawledUrlsForSitemap = new Set(); // C√°c URL h·ª£p l·ªá ƒë√£ crawl ƒë·ªÉ t·∫°o sitemap
let seoReports = []; // C√°c c·∫£nh b√°o SEO ri√™ng l·∫ª cho t·ª´ng trang

// Th·ªëng k√™ cho b√°o c√°o t·ªïng th·ªÉ
let totalMissingAltImages = 0;
let total404Pages = 0;
let pagesWith404 = []; // Danh s√°ch c√°c trang l·ªói 404
let pagesWithMissingAlt = []; // Danh s√°ch c√°c trang c√≥ ·∫£nh thi·∫øu alt { urlTrang, images: [imgUrl, ...] }

// L·∫•y domain ch√≠nh ƒë·ªÉ t·∫°o th∆∞ m·ª•c con trong output
function getDomainFolder(url) {
  const hostname = new URL(url).hostname.replace(/^www\./, "");
  return path.join(outputDir, hostname);
}

// T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });

// T·∫°o th∆∞ m·ª•c domain n·∫øu ch∆∞a c√≥
const domainFolder = getDomainFolder(startUrl);
if (!fs.existsSync(domainFolder))
  fs.mkdirSync(domainFolder, { recursive: true });

// --- H√†m ti·ªán √≠ch ---
function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† URL b√†i vi·∫øt kh√¥ng (lo·∫°i b·ªè category, files tƒ©nh)
function isArticleURL(url) {
  try {
    const urlObj = new URL(url);
    // B·ªè qua c√°c file tƒ©nh v√† c√°c ƒë∆∞·ªùng d·∫´n /category, /tag
    if (
      urlObj.pathname.match(
        /\.(jpg|jpeg|png|gif|webp|svg|css|js|pdf|xml|txt)$/i
      ) ||
      urlObj.pathname.includes("/category") ||
      urlObj.pathname.includes("/tag")
    ) {
      return false;
    }
    // ƒê·∫£m b·∫£o l√† c√πng domain v√† kh√¥ng ph·∫£i ch·ªâ l√† root (v√≠ d·ª•: http://example.com/)
    return (
      urlObj.hostname === new URL(startUrl).hostname &&
      urlObj.pathname.length > 1
    );
  } catch (e) {
    console.warn(`L·ªói khi ki·ªÉm tra URL: ${url} - ${e.message}`);
    return false;
  }
}

// --- Ch·ª©c nƒÉng ch√≠nh: X·ª≠ l√Ω Sitemap ---
async function getArticleURLsFromSitemap(sitemapUrl) {
  try {
    console.log(`ƒêang c·ªë g·∫Øng t·∫£i sitemap t·ª´: ${sitemapUrl}`);
    const res = await fetch(sitemapUrl, { timeout: 15000 }); // TƒÉng timeout
    if (!res.ok) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i sitemap, tr·∫°ng th√°i: ${res.status}`);
    }
    const xml = await res.text();
    const parsed = await new xml2js.Parser().parseStringPromise(xml);

    const urls = [];
    // X·ª≠ l√Ω urlset
    if (parsed.urlset && parsed.urlset.url) {
      urls.push(...parsed.urlset.url.map((u) => u.loc[0]));
    }
    // X·ª≠ l√Ω sitemapindex (sitemap c·ªßa c√°c sitemap con)
    if (parsed.sitemapindex && parsed.sitemapindex.sitemap) {
      console.log("T√¨m th·∫•y sitemap index. ƒêang ƒë·ªçc c√°c sitemap con...");
      for (const sitemapEntry of parsed.sitemapindex.sitemap) {
        const subSitemapUrl = sitemapEntry.loc[0];
        try {
          const subRes = await fetch(subSitemapUrl, { timeout: 15000 });
          if (!subRes.ok) {
            console.warn(
              `‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i sitemap con: ${subSitemapUrl}, tr·∫°ng th√°i: ${subRes.status}`
            );
            continue;
          }
          const subXml = await subRes.text();
          const subParsed = await new xml2js.Parser().parseStringPromise(
            subXml
          );
          if (subParsed.urlset && subParsed.urlset.url) {
            urls.push(...subParsed.urlset.url.map((u) => u.loc[0]));
          }
        } catch (subErr) {
          console.warn(
            `‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω sitemap con ${subSitemapUrl}: ${subErr.message}`
          );
        }
      }
    }
    const filteredUrls = urls.filter(isArticleURL);
    console.log(
      `ƒê√£ t√¨m th·∫•y ${filteredUrls.length} URL t·ª´ sitemap (sau khi l·ªçc).`
    );
    return filteredUrls;
  } catch (err) {
    console.warn(
      `‚ö†Ô∏è Kh√¥ng t·∫£i ho·∫∑c ph√¢n t√≠ch ƒë∆∞·ª£c sitemap t·ª´ ${sitemapUrl}: ${err.message}`
    );
    return [];
  }
}

async function generateSitemap(
  urls,
  outputPath,
  filename = "sitemap_generated.xml"
) {
  if (urls.size === 0) {
    console.log("Kh√¥ng c√≥ URL n√†o ƒë∆∞·ª£c crawl th√†nh c√¥ng ƒë·ªÉ t·∫°o sitemap.");
    return null;
  }

  let urlEntries = "";
  const now = new Date().toISOString().split("T")[0]; // ƒê·ªãnh d·∫°ng YYYY-MM-DD
  for (const url of urls) {
    urlEntries += `
        <url>
            <loc>${url}</loc>
            <lastmod>${now}</lastmod>
            <changefreq>daily</changefreq>
            <priority>0.7</priority>
        </url>`;
  }

  const sitemapContent = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    ${urlEntries}
</urlset>`;

  const sitemapFilePath = path.join(outputPath, filename);
  fs.writeFileSync(sitemapFilePath, sitemapContent.trim(), "utf-8"); // .trim() ƒë·ªÉ lo·∫°i b·ªè d√≤ng tr·∫Øng th·ª´a
  console.log(`üìÑ ƒê√£ t·∫°o sitemap t√πy ch·ªânh: ${sitemapFilePath}`);
  return sitemapFilePath;
}

// --- Ch·ª©c nƒÉng Robots.txt ---
const robotsTxtCache = new Map(); // Cache robots.txt ƒë·ªÉ tr√°nh t·∫£i nhi·ªÅu l·∫ßn
async function isAllowedByRobots(url) {
  try {
    const urlObj = new URL(url);
    const robotsUrl = new URL("/robots.txt", urlObj.origin).href;

    if (!robotsTxtCache.has(robotsUrl)) {
      console.log(`ƒêang t·∫£i robots.txt t·ª´: ${robotsUrl}`);
      const res = await fetch(robotsUrl, { timeout: 8000 });
      if (!res.ok) {
        console.warn(
          `Kh√¥ng t·∫£i ƒë∆∞·ª£c robots.txt t·ª´ ${robotsUrl}, tr·∫°ng th√°i: ${res.status}. Coi nh∆∞ ƒë∆∞·ª£c ph√©p.`
        );
        robotsTxtCache.set(robotsUrl, null); // L∆∞u null ƒë·ªÉ bi·∫øt ƒë√£ th·ª≠ t·∫£i
        return true;
      }
      const txt = await res.text();
      robotsTxtCache.set(robotsUrl, robotsParser(robotsUrl, txt));
    }

    const robots = robotsTxtCache.get(robotsUrl);
    if (!robots) return true; // N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c robots.txt

    // Ki·ªÉm tra cho c√°c user-agent ph·ªï bi·∫øn ho·∫∑c user-agent t√πy ch·ªânh
    const allowed =
      robots.isAllowed(url, "Googlebot") ||
      robots.isAllowed(url, "MyFriendlyBot");
    return allowed;
  } catch (e) {
    console.warn(
      `‚ö†Ô∏è L·ªói khi ki·ªÉm tra robots.txt cho ${url}: ${e.message}. Coi nh∆∞ ƒë∆∞·ª£c ph√©p.`
    );
    return true;
  }
}

// --- Ch·ª©c nƒÉng t·∫£i ·∫£nh ---
async function downloadImage(url, folder) {
  try {
    const res = await fetch(url, { timeout: 10000 });
    if (!res.ok) throw new Error(`Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh, status: ${res.status}`);

    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    if (!fs.existsSync(folder)) fs.mkdirSync(folder, { recursive: true });

    const buffer = await res.buffer();
    const urlObj = new URL(url);
    // L·∫•y t√™n file t·ª´ pathname, b·ªè c√°c query params
    let filename = path.basename(urlObj.pathname).split("?")[0];
    // ƒê·∫£m b·∫£o filename kh√¥ng r·ªóng v√† c√≥ ƒëu√¥i m·ªü r·ªông
    if (!filename || !filename.includes(".")) {
      filename = `image_${Date.now()}.${
        res.headers.get("content-type")?.split("/")[1] || "jpg"
      }`;
    }
    const filepath = path.join(folder, filename);
    fs.writeFileSync(filepath, buffer);
    return filename;
  } catch (e) {
    console.warn(`‚ö†Ô∏è T·∫£i ·∫£nh th·∫•t b·∫°i (${e.message}): ${url}`);
    return null;
  }
}

// --- Ch·ª©c nƒÉng Crawl trang v√† ph√¢n t√≠ch SEO ---
async function crawlPage(
  page,
  url,
  articlesCollection,
  saveToDb = true,
  collectSeoInfo = true
) {
  const pageSeoWarnings = []; // C·∫£nh b√°o SEO ri√™ng cho trang n√†y
  await page.setUserAgent(
    "MyFriendlyBot/1.0 (+https://yourdomain.com/bot-info)" // Thay ƒë·ªïi t√πy √Ω
  );

  let status = 200; // M·∫∑c ƒë·ªãnh l√† 200 OK
  try {
    const response = await page.goto(url, {
      waitUntil: "domcontentloaded",
      timeout: 30000,
    }); // TƒÉng timeout
    status = response ? response.status() : 200; // L·∫•y tr·∫°ng th√°i t·ª´ response, n·∫øu c√≥
    await delay(Math.random() * 2000 + 1000); // Th√™m ƒë·ªô tr·ªÖ ng·∫´u nhi√™n

    if (status === 404) {
      if (collectSeoInfo) {
        pageSeoWarnings.push("‚ùå Trang tr·∫£ v·ªÅ 404 (li√™n k·∫øt h·ªèng)");
        total404Pages++;
        pagesWith404.push(url);
      }
    } else {
      // Lu√¥n th√™m v√†o danh s√°ch t·∫°o sitemap n·∫øu trang kh√¥ng ph·∫£i 404 v√† l√† URL b√†i vi·∫øt
      if (isArticleURL(url)) {
        crawledUrlsForSitemap.add(url);
      }
    }

    if (collectSeoInfo && status !== 404) {
      // Ch·ªâ ph√¢n t√≠ch SEO n·∫øu trang kh√¥ng ph·∫£i 404
      const metadata = await page.evaluate(() => {
        const get = (sel) => document.querySelector(sel)?.content || "";
        return {
          title: document.title,
          h1: document.querySelector("h1")?.innerText || "",
          description: get('meta[name="description"]'),
          canonical:
            document.querySelector("link[rel='canonical']")?.href || "",
          lang: document.documentElement.lang || "",
          viewport: get('meta[name="viewport"]'),
        };
      });

      // Ki·ªÉm tra SEO c∆° b·∫£n
      if (!metadata.h1) pageSeoWarnings.push("‚ö†Ô∏è Thi·∫øu th·∫ª H1");
      if (
        !metadata.title ||
        metadata.title.length < 10 ||
        metadata.title.length > 70
      ) {
        pageSeoWarnings.push(
          `‚ö†Ô∏è Ti√™u ƒë·ªÅ (${metadata.title.length} k√Ω t·ª±) kh√¥ng t·ªëi ∆∞u (n√™n t·ª´ 10-70 k√Ω t·ª±)`
        );
      }
      if (
        !metadata.description ||
        metadata.description.length < 50 ||
        metadata.description.length > 160
      ) {
        pageSeoWarnings.push(
          `‚ö†Ô∏è M√¥ t·∫£ (${metadata.description.length} k√Ω t·ª±) kh√¥ng t·ªëi ∆∞u (n√™n t·ª´ 50-160 k√Ω t·ª±)`
        );
      }
      if (!metadata.canonical || metadata.canonical.trim() !== url.trim()) {
        pageSeoWarnings.push(
          `‚ö†Ô∏è Thi·∫øu ho·∫∑c Canonical URL kh√¥ng kh·ªõp: ${
            metadata.canonical || "Kh√¥ng c√≥"
          }`
        );
      }
      const isResponsive = metadata.viewport.includes("width=device-width");
      if (!isResponsive)
        pageSeoWarnings.push("‚ö†Ô∏è Thi·∫øu th·∫ª viewport responsive");

      // T√¨m ·∫£nh thi·∫øu alt
      const imgsMissingAlt = await page.$$eval("img", (imgs) =>
        imgs
          .filter((img) => !img.alt || img.alt.trim() === "")
          .map((img) => img.src)
      );

      if (imgsMissingAlt.length > 0) {
        pageSeoWarnings.push(
          `‚ö†Ô∏è C√≥ ${imgsMissingAlt.length} ·∫£nh thi·∫øu thu·ªôc t√≠nh alt`
        );
        totalMissingAltImages += imgsMissingAlt.length;
        pagesWithMissingAlt.push({ urlTrang: url, images: imgsMissingAlt });
      }

      // L·∫•y n·ªôi dung b√†i vi·∫øt v√† gi√° (n·∫øu c√≥)
      const content = await page
        .$eval("article, main, body", (el) => el.innerText) // T√¨m th·∫ª article, main ho·∫∑c body
        .catch(() => "");
      const price = await page
        .$eval(".price, [itemprop='price']", (el) => el.innerText) // Th√™m itemprop
        .catch(() => "");

      // T·∫°o th∆∞ m·ª•c ri√™ng cho trang v√† t·∫£i ·∫£nh (ch·ªâ khi thu th·∫≠p SEO info)
      // L·∫•y m·ªôt ph·∫ßn c·ªßa URL l√†m t√™n th∆∞ m·ª•c, ƒë·∫£m b·∫£o h·ª£p l·ªá
      const urlPathSegment = new URL(url).pathname
        .replace(/\/+$/, "") // Lo·∫°i b·ªè d·∫•u / ·ªü cu·ªëi
        .replace(/^\//, ""); // Lo·∫°i b·ªè d·∫•u / ·ªü ƒë·∫ßu
      const pageFolderName = urlPathSegment
        ? urlPathSegment.replace(/[^a-zA-Z0-9_-]+/g, "_").substring(0, 50) // Gi·ªõi h·∫°n ƒë·ªô d√†i
        : "root_page";
      const pageFolder = path.join(domainFolder, pageFolderName);

      const downloadedImgs = [];
      // T·∫£i t·ªëi ƒëa 3 ·∫£nh (c√≥ th·ªÉ c·∫•u h√¨nh)
      const images = await page.$$eval("img", (imgs) =>
        imgs.map((img) => img.src)
      );
      for (const src of images.slice(0, 3)) {
        const filename = await downloadImage(src, pageFolder);
        if (filename) downloadedImgs.push(filename);
      }

      if (pageSeoWarnings.length > 0) {
        seoReports.push(`üîó URL: ${url}\n${pageSeoWarnings.join("\n")}\n`);
      }

      if (saveToDb) {
        await articlesCollection.insertOne({
          url,
          metadata,
          price,
          content: content.substring(0, 5000), // Gi·ªõi h·∫°n ƒë·ªô d√†i content l∆∞u v√†o DB
          images: downloadedImgs,
          seoWarnings: pageSeoWarnings,
          crawledAt: new Date(),
        });
      }
    }
    console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω (Tr·∫°ng th√°i: ${status}): ${url}`);
  } catch (err) {
    console.warn(`‚ùå L·ªói khi x·ª≠ l√Ω trang (${err.message}): ${url}`);
    if (collectSeoInfo) {
      // Ghi nh·∫≠n l·ªói n·∫øu ƒëang ·ªü giai ƒëo·∫°n ph√¢n t√≠ch SEO
      pageSeoWarnings.push(`‚ùå L·ªói truy c·∫≠p/ph√¢n t√≠ch trang: ${err.message}`);
      seoReports.push(`üîó URL: ${url}\n${pageSeoWarnings.join("\n")}\n`);
    }
  }
}

// --- H√†m ch√≠nh ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh ---
async function main(startUrl) {
  let browser;
  let client;
  try {
    browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();
    client = await MongoClient.connect(mongoUri);
    const db = client.db(dbName);
    const articlesCollection = db.collection("articles");
    const seoSummaryCollection = db.collection("seo_summary_reports");

    // X√≥a d·ªØ li·ªáu c≈© trong DB tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu (t√πy ch·ªçn)
    await articlesCollection.deleteMany({});
    await seoSummaryCollection.deleteMany({});
    console.log("ƒê√£ x√≥a d·ªØ li·ªáu c≈© trong MongoDB.");

    // --- GIAI ƒêO·∫†N 0: T·∫¢I SITEMAP C≈® (CH·ªà ƒê·ªÇ THAM KH·∫¢O) ---
    console.log(
      "\n--- GIAI ƒêO·∫†N 0: T·∫¢I SITEMAP HI·ªÜN C√ì (CH·ªà ƒê·ªÇ THAM KH·∫¢O) ---"
    );
    const sitemapCurrentUrl = new URL("/sitemap.xml", startUrl).href;
    const urlsFromOldSitemap = await getArticleURLsFromSitemap(
      sitemapCurrentUrl
    );
    if (urlsFromOldSitemap.length > 0) {
      console.log(
        `‚úÖ ƒê√£ t·∫£i v√† ƒë·ªçc ${urlsFromOldSitemap.length} URL t·ª´ sitemap hi·ªán c√≥ c·ªßa website.`
      );
    } else {
      console.log(
        "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y sitemap hi·ªán c√≥ ho·∫∑c kh√¥ng c√≥ URL n√†o trong ƒë√≥."
      );
    }

    // --- GIAI ƒêO·∫†N 1: CRAWL ƒê·ªÇ T·∫†O SITEMAP M·ªöI (B·∫ÆT ƒê·∫¶U T·ª™ START_URL) ---
    console.log("\n--- GIAI ƒêO·∫†N 1: CRAWL ƒê·ªÇ T·∫†O SITEMAP M·ªöI ---");

    visited = new Set();
    toVisit = new Set();
    crawledUrlsForSitemap.clear(); // X√≥a d·ªØ li·ªáu c≈©

    // LU√îN B·∫ÆT ƒê·∫¶U CRAWL T·ª™ START_URL ƒë·ªÉ t·∫°o sitemap m·ªõi
    console.log(`B·∫Øt ƒë·∫ßu crawl t·ª´ URL g·ªëc (${startUrl}) ƒë·ªÉ t·∫°o sitemap m·ªõi.`);
    toVisit.add(startUrl);

    let crawledCountForSitemap = 0;
    const processedUrlsDuringSitemapGen = new Set(); // ƒê·ªÉ theo d√µi c√°c URL ƒë√£ x·ª≠ l√Ω trong giai ƒëo·∫°n n√†y
    while (
      toVisit.size > 0 &&
      crawledCountForSitemap < maxArticlesToCrawlForSitemap
    ) {
      const url = toVisit.values().next().value;
      toVisit.delete(url);

      if (processedUrlsDuringSitemapGen.has(url)) {
        // Ki·ªÉm tra ƒë√£ x·ª≠ l√Ω trong giai ƒëo·∫°n n√†y ch∆∞a
        console.log(`‚è© [Sitemap Gen] B·ªè qua (ƒë√£ x·ª≠ l√Ω): ${url}`);
        continue;
      }

      if (!(await isAllowedByRobots(url))) {
        console.log(
          `‚õî [Sitemap Gen] B·ªè qua (robots.txt kh√¥ng cho ph√©p): ${url}`
        );
        processedUrlsDuringSitemapGen.add(url);
        continue;
      }

      // Trong giai ƒëo·∫°n n√†y, ch√∫ng ta ch·ªâ c·∫ßn crawl ƒë·ªÉ bi·∫øt URL c√≥ t·ªìn t·∫°i v√† thu th·∫≠p cho sitemap
      // Kh√¥ng c·∫ßn l∆∞u v√†o DB hay thu th·∫≠p chi ti·∫øt SEO
      await crawlPage(page, url, articlesCollection, false, false);
      processedUrlsDuringSitemapGen.add(url); // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
      crawledCountForSitemap++;

      // T√¨m th√™m c√°c li√™n k·∫øt n·ªôi b·ªô ƒë·ªÉ crawl cho sitemap
      try {
        const newLinks = await page.$$eval(
          "a[href]",
          (anchors, origin) =>
            anchors
              .map((a) => a.href)
              .filter(
                (href) =>
                  href.startsWith(origin) && // Ch·ªâ li√™n k·∫øt n·ªôi b·ªô
                  !href.includes("#") && // B·ªè qua anchor links
                  !href.match(
                    /\.(jpg|jpeg|png|gif|webp|svg|css|js|pdf|xml|txt)$/i
                  ) // B·ªè qua file tƒ©nh
              ),
          new URL(url).origin
        ); // Truy·ªÅn origin v√†o evaluate context

        newLinks.forEach((link) => {
          // Th√™m v√†o toVisit n·∫øu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω v√† l√† URL b√†i vi·∫øt
          if (
            !processedUrlsDuringSitemapGen.has(link) &&
            isArticleURL(link) &&
            !toVisit.has(link)
          ) {
            toVisit.add(link);
          }
        });
      } catch (e) {
        console.warn(
          `L·ªói khi t√¨m li√™n k·∫øt n·ªôi b·ªô trong giai ƒëo·∫°n sitemap gen: ${e.message}`
        );
      }
    }

    console.log(
      `\nT·ªïng s·ªë URL ƒë√£ crawl th√†nh c√¥ng ƒë·ªÉ t·∫°o sitemap m·ªõi: ${crawledUrlsForSitemap.size}`
    );
    const generatedSitemapPath = await generateSitemap(
      crawledUrlsForSitemap,
      domainFolder,
      "sitemap_new_generated.xml"
    );

    if (!generatedSitemapPath) {
      console.error("Kh√¥ng th·ªÉ t·∫°o sitemap m·ªõi. K·∫øt th√∫c ch∆∞∆°ng tr√¨nh.");
      return;
    }

    // --- GIAI ƒêO·∫†N 2: PH√ÇN T√çCH SEO TR√äN SITEMAP M·ªöI ƒê∆Ø·ª¢C T·∫†O ---
    console.log(
      "\n--- GIAI ƒêO·∫†N 2: PH√ÇN T√çCH SEO TR√äN SITEMAP M·ªöI ƒê∆Ø·ª¢C T·∫†O ---"
    );

    // ƒê·∫∑t l·∫°i c√°c bi·∫øn tr·∫°ng th√°i v√† th·ªëng k√™ cho giai ƒëo·∫°n ph√¢n t√≠ch SEO
    visited = new Set(); // visited cho giai ƒëo·∫°n n√†y
    toVisit = new Set(); // toVisit cho giai ƒëo·∫°n n√†y
    seoReports = [];
    totalMissingAltImages = 0;
    total404Pages = 0;
    pagesWith404 = [];
    pagesWithMissingAlt = [];

    // L·∫•y c√°c URL t·ª´ sitemap M·ªöI ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch SEO
    const urlsFromNewSitemap = await getArticleURLsFromSitemap(
      generatedSitemapPath
    );
    if (urlsFromNewSitemap.length === 0) {
      console.error(
        "Kh√¥ng c√≥ URL n√†o trong sitemap m·ªõi ƒë·ªÉ ph√¢n t√≠ch SEO. K·∫øt th√∫c ch∆∞∆°ng tr√¨nh."
      );
      return;
    }
    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng URL ph√¢n t√≠ch SEO theo c·∫•u h√¨nh
    const urlsToAnalyze = urlsFromNewSitemap.slice(0, maxArticlesToAnalyze);
    urlsToAnalyze.forEach((url) => toVisit.add(url));
    console.log(
      `B·∫Øt ƒë·∫ßu ph√¢n t√≠ch SEO tr√™n ${urlsToAnalyze.length} URL t·ª´ sitemap m·ªõi.`
    );

    let analyzedCount = 0;
    while (toVisit.size > 0 && analyzedCount < maxArticlesToAnalyze) {
      const url = toVisit.values().next().value;
      toVisit.delete(url);

      if (visited.has(url)) {
        console.log(`‚è© [SEO Analyze] B·ªè qua (ƒë√£ ph√¢n t√≠ch): ${url}`);
        continue;
      }
      if (!(await isAllowedByRobots(url))) {
        console.log(
          `‚õî [SEO Analyze] B·ªè qua (robots.txt kh√¥ng cho ph√©p): ${url}`
        );
        visited.add(url); // ƒê√°nh d·∫•u l√† ƒë√£ x·ª≠ l√Ω (b·ªè qua)
        continue;
      }

      // Trong giai ƒëo·∫°n n√†y, ch√∫ng ta l∆∞u v√†o DB v√† thu th·∫≠p th√¥ng tin SEO chi ti·∫øt
      await crawlPage(page, url, articlesCollection, true, true);
      visited.add(url);
      analyzedCount++;
    }

    console.log("\n--- HO√ÄN T·∫§T QU√Å TR√åNH PH√ÇN T√çCH SEO ---");

    // --- T·∫°o b√°o c√°o t·ªïng h·ª£p ---
    let summaryReport = `\n=== B√ÅO C√ÅO SEO T·ªîNG K·∫æT (${new Date().toLocaleString()}) ===\n`;
    summaryReport += `T√™n mi·ªÅn: ${new URL(startUrl).hostname}\n`;
    summaryReport += `Sitemap ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ph√¢n t√≠ch: ${path.basename(
      generatedSitemapPath
    )}\n`;
    summaryReport += `T·ªïng s·ªë URL ƒë√£ ph√¢n t√≠ch: ${visited.size}\n`;
    summaryReport += `T·ªïng s·ªë ·∫£nh thi·∫øu thu·ªôc t√≠nh alt: ${totalMissingAltImages}\n`;
    summaryReport += `T·ªïng s·ªë trang tr·∫£ v·ªÅ l·ªói 404: ${total404Pages}\n\n`;

    if (pagesWith404.length > 0) {
      summaryReport += "--- DANH S√ÅCH TRANG L·ªñI 404 ---\n";
      pagesWith404.forEach((url) => {
        summaryReport += ` - ${url}\n`;
      });
      summaryReport += "\n";
    }

    if (pagesWithMissingAlt.length > 0) {
      summaryReport += "--- DANH S√ÅCH TRANG C√ì ·∫¢NH THI·∫æU ALT ---\n";
      pagesWithMissingAlt.forEach(({ urlTrang, images }) => {
        summaryReport += `\n=> Trang: ${urlTrang}\n`;
        images.forEach((imgUrl) => {
          summaryReport += `    - ·∫¢nh thi·∫øu alt: ${imgUrl}\n`;
        });
      });
      summaryReport += "\n";
    }

    summaryReport += "--- ƒê·ªÄ XU·∫§T C·∫¢I THI·ªÜN CHUNG ---\n";
    summaryReport +=
      "- ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c trang quan tr·ªçng c√≥ th·∫ª H1, title v√† description ƒë·∫ßy ƒë·ªß.\n";
    summaryReport +=
      "- T·ªëi ∆∞u ƒë·ªô d√†i title (10-70 k√Ω t·ª±) v√† description (50-160 k√Ω t·ª±).\n";
    summaryReport += "- Ki·ªÉm tra v√† s·ª≠a c√°c li√™n k·∫øt h·ªèng (trang 404).\n";
    summaryReport +=
      "- Th√™m thu·ªôc t√≠nh alt cho t·∫•t c·∫£ c√°c ·∫£nh ƒë·ªÉ c·∫£i thi·ªán kh·∫£ nƒÉng ti·∫øp c·∫≠n v√† SEO h√¨nh ·∫£nh.\n";
    summaryReport +=
      "- ƒê·∫£m b·∫£o th·∫ª canonical URL ƒë∆∞·ª£c thi·∫øt l·∫≠p ch√≠nh x√°c cho m·ªói trang.\n";
    summaryReport +=
      "- S·ª≠ d·ª•ng th·∫ª viewport responsive ƒë·ªÉ t·ªëi ∆∞u hi·ªÉn th·ªã tr√™n c√°c thi·∫øt b·ªã di ƒë·ªông.\n";
    summaryReport += "\n=== B√ÅO C√ÅO CHI TI·∫æT T·ª™NG URL ===\n\n";

    const reportFile = path.join(domainFolder, "seo_report.txt");
    fs.writeFileSync(
      reportFile,
      summaryReport + seoReports.join("\n\n"), // Ghi b√°o c√°o t·ªïng h·ª£p tr∆∞·ªõc, r·ªìi ƒë·∫øn chi ti·∫øt
      "utf-8"
    );
    console.log("üìÑ ƒê√£ l∆∞u b√°o c√°o SEO chi ti·∫øt v√† t·ªïng h·ª£p t·∫°i:", reportFile);

    // L∆∞u b√°o c√°o SEO t·ªïng h·ª£p v√†o MongoDB
    const seoSummary = {
      domain: new URL(startUrl).hostname,
      sitemapUsed: path.basename(generatedSitemapPath),
      totalUrlsAnalyzed: visited.size,
      totalMissingAltImages,
      total404Pages,
      pagesWith404,
      pagesWithMissingAlt,
      createdAt: new Date(),
    };
    await seoSummaryCollection.insertOne(seoSummary);
    console.log("üìä ƒê√£ l∆∞u b√°o c√°o t·ªïng h·ª£p v√†o MongoDB.");
  } catch (err) {
    console.error("L·ªói nghi√™m tr·ªçng khi ch·∫°y ch∆∞∆°ng tr√¨nh:", err);
  } finally {
    // --- ƒê√≥ng tr√¨nh duy·ªát v√† k·∫øt n·ªëi DB ---
    if (browser) {
      await browser.close();
      console.log("ƒê√£ ƒë√≥ng tr√¨nh duy·ªát.");
    }
    if (client) {
      await client.close();
      console.log("ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB.");
    }
    console.log("Ch∆∞∆°ng tr√¨nh ho√†n t·∫•t.");
  }
}

// --- Ch·∫°y ch∆∞∆°ng tr√¨nh ---
main(startUrl);
